
public class JavaIntroduction {

	public static void main(String[] args) {
		/*
		 * <  자바의 특징  > 
		 * 
		 * 1. 객체 지향언어이다.
		 * 2. JVM에 의해 실행되기 때문에 플랫폼에 독립적이다.(플랫폼에 컴파일러 따로 필요 X)
		 * 3. 바이트 코드로 변환되어 실행되기 때문에(클래스파일로 컴파일) 고성능
		 * 4. 멀티 스레딩을 지원
		 * 5. 자동으로 메모리 관리를 해준다. 
		 * JVM에서 Garbage Collector라고 불리는 데몬 쓰레드에 의해
		 * GC(Garbage Collection)이 일어난다. GC로 인해 별도의 메ㅐ도리관리가 필요없다.
		 * 
		 * 6. 오픈 소스이다. 
		 * 7. 동적 로딩을 지원한다.
		 * 애플리케이션이 실행될 때 모든 객체가 생성되지 않고, 각 객체가 필요한 시점에
		 * 클래스를 동적 로딩해서 생성한다. 유지보수 시 해당 클래스만 수정하면 되기 때문에
		 * 전체 어플리케이션을 다시 컴파일할 필요가 없다. 유지보수가 쉽고 빠르다. 
		 * 
		 * <  자바의 단점 >
		 * 1. 비교적 속도가 느리다. 
		 * 한 번의 컴파일링으로 실행 가능한 기계어가 만들어지지 않고 JVM에 의해
		 * 기계어로 번역되고 실행하는 과정을 거치기 때문에 다른 언어(컴파일러로 의해
		 * 컴파일되어 바로 실행)에 비해 속도는 느리다. 
		 * 하지만, 하드웨어의 성능 향상과 바이트 코드를 기계어로 변환해주는 JIT컴파일러
		 * 같은 기술 적용으로 JVM의 기능이 향상되어 속도의 격차가 다소 감소하는 추세. 
		 * 
		 * 2. 예외처리가 불편하다. 
		 * 프로그래머 검사가 필요한 예외가 등장한다면 무조건 프로그래머가 선언을 해주어야한다.
		 * 
		 * 
		 * 
		 * 
		 * <  객체지향 언어의 장점과 특징 >
		 * 장점: 코드의 재사용성이 높다. 
		 * 다양한 라이브러리와 객체를 제공하므로 필요한 기능만 
		 * 가져와서 사용하면 생산성이 높아지고 버그 발생률 줄일 수 있다.
		 * 객체 단위로 코드를 작성하므로 협업에 최적화되고 유지보수 용이하다 
		 * 
		 * 특징
		 * 1. 상속
		 * 상속이란 어떤 클래스가 다른 클래스를 연장하여 다시 쓰는것 
		 * 기존 클래스는 부모 클래스이고 새로 파생된 클래스는 서브클래스이다. 
		 * 
		 * 2. 캡슐화 
		 * 내부의 코드를 캡슐처럼 보호하기 위하여 사용된다.
		 * 캡슐화하기 위해서 private키워드를 사용하고 
		 * setter와 getter 메소드를 만들어 사용합니다. 
		 * 캡슐안의 직접적인 사용은 불가능 하며 오로지 메소드로만 접근가능합니다.
		 * 
		 * 3. 다형성 
		 * 하나의 객체를 여러가지 타입으로 해석할 수 있는 기술 
		 * 다형성 구현을 위해 메소드의 이름은 같게
		 * 리턴형이나 혹은 파라미터의 개수나 타입을 다르게하여 재정의 가능 
		 * 
		 * 4. 추상 
		 * 객체를 생성할 수 없는 클래스로, 오로지 부모 클래스로써의 역할만 
		 * 하는 클래스입니다. 클래스 앞에 abstract 키워드를 붙입니다. 
		 * 추상클래스는 추상메소드를 반드시 가져야하지만, 
		 * 비추상메소드도 가질 수 있습니다. 
		 * 추상클래스가 가지는 추상메소드의 접근 
		 * 제어자는 private은 올 수 없는데, 
		 * 자식 클래스가 받아서 그 메소드를 오버라이드 할 수 있어야 합니다. 
		 * 
		 * 5. 인터페이스 
		 * 
		 * 인터페이스란 메소드 선언만 하고 구현은 되어있지 않은 템플릿
		 * 
		 * - 모든 메소드는 내부적으로 public abstract이어야 하는데, 다른
		 * 클래스에서 구현하여 정의 할 수 있어야 하기 때문이다.
		 *  
		 * - 모든 변수는 public static final constant이어야 합니다.
		 *  
		 * - 인터페이스를 구현하는 클래스는 인터페이스에 선언된 모든 메소드를 
		 * 포함하고 있어야 합니다. 
		 * 
		 * 자바는 다중 상속(2개 클래스 이상 상속하지 못함)을 지원하지 않지만, 
		 * 인터페이스를 통하여 보강할 수 있습니다. 인터페이스는 팀 작업시 
		 * 공동 템플릿으로 이용가능합니다. 
		 * 
		 * 자바에서 클래스는 
		 * 자바에서 모든 코드는 클래스 안에서 정의되며, 그 안에 변수와 메소드를 가집니다.
		 * 
		 * 객체란?
		 * 
		 * 
		 * 클래스의 인스턴스를 객체라고 하고 클래스는 코드를 모아서 정의한 것일뿐입니다.
		 * 특정 메모리를 할당 받지 않지만, 객체는 JVM이 new()라는 키워드를 인식하여
		 * 인스턴스가 생성되는 그 순간, 특정 메모리를 할당받아 가지게 됩니다.
		 * 
		 * 생성자란?
		 * 
		 * 
		 * 생성자는 클래스와 같은 이름의 메소드로, 새 객체가 생성될 때 호출되는 메소드입니다.
		 * 명시적으로 생성자를 만들지 않아도 default로 만들어지고 생성자는 파라미터를 다르게 하여 
		 * 오버로드 할 수 있으며, 파라미터 생성자를 만든다면 파라미터가 없는 default형 생성자도 명시적으로
		 * 만들어 주어야 합니다. 
		 * 
		 * 지역변수와 인스턴스 변수
		 * 
		 * 
		 * 지역변수는 메소드 안에서 정의되며, 메소드 안의 스코프 안에서만 존재 
		 * 인스턴스 변수는 클래스에서 정의되어 클래스 전체의 스코프 안에 존재하게 됩니다. 
		 * 
		 * 오버로딩과 오버라이딩
		 * 
		 * 오버로딩은, 다양한 타입과 개수의 파라미터를 가진 메소드를 여러개 생성하여,
		 * 다양한 유형의 호출에 응답하게 하는 기술 
		 * 
		 * 오버라이딩은, 상속관계에 있는 두 클래스에서 자식클래스가 부모 클래스가 
		 * 갖고 있지 않은 서브클래스만의 특정정보를 재정의하게 하는 것 
		 * 
		 * - 메소드 이름이 일치해야하고
		 * - argument가 같아야하고 
		 * - return 값도 같아야한다.
		 * 
		 * 
		 * 접근제어자 
		 * 
		 * Public / private / protected / package
		 * 
		 *  
		 * public 멤버는 같은 패키지않의 클래스뿐 아니다, 다른 패키지 안의 클래스에서도 보입니다.
		 * private 멤버는 오로지 그 클래스에서만 보입니다. 같은 패키지 안의 다른 클래스라 할지라도 보이지 않습니다.
		 * protected 동일 패키지 안에서 상속관계에 있는 하위 클래스의 객체들만 접근가능 
		 * package 동일 패키지에 있는 클래스의 객체들만 접근 가능 
		 * 
		 * 
		 * 
		 * 추상클래스와 인터페이스 
		 * 
		 * 추상클래스 
		 * 
		 * 1. Default 생성자를 가진다.(서브클래스가 인스턴스화될 때 호출됨)
		 * 2. 추상 메소드, 비 추상메서드 포함할 수 있다.
		 * 3. 추상 클래스를 상속한 클래스는 꼭 모든 메소드를 구현할 필요는 없으며,
		 * 추상메소드만 서브클래스 안에서 구현하면 된다. 
		 * 4, 객체 생성 불가하므로 extend(상속)으로 구현 
		 * 
		 * 인스턴스 
		 * 1. 생성자를 가지지 않는다.
		 * 2. 추상메소드만 선언할 수 있다.
		 * 3. 인터페이스를 구현하는 클래스는 인터페이스에서 선언된 모든 메소드를 
		 * 다 구현해야 한다.
		 * 4. 객체 생성 불가하므로 implement로 구현 
		 * 
		 * 
		 * */
	}

}
