package com.javastudy.threadtest;

public class ThreadSafe {
	/* 스레드 안전은 스레드 프로그래밍에서 일반적으로 
		스레드 프로그래밍에서 일반적으로 어떤 함수나 변수, 혹은 객체가 여러 
		스레드로부터 동시에 접근이 이루어져도 프로그램의 실행에 문제가 없음을 뜻함
		하나의 함수가 한 스레드로부터 호출되어 실행되었을 때, 다른 스레드가 그 함수를 호출하여
		실행한다 하더라도 각 스레드에서의 함수의 수행 결과가 올바로 나오는 것으로 정의
	*
	* 1.Re-entrancy
	* 
	*  어떤 함수가 한 스레드에 의해 호출되어 실행 중일 때, 다른 스레드가 그 함수를
	*  호출하더라도 그 결과가 각각에게 올바로 주어져야 한다. 
	*  
	* 2. Thread-local storage
	
	*  공유 자원의 사용을 최대한 줄여 각각의 스레드에서만 접근 가능한 저장소들을
	*  사용함으로써 동시 접근을 막는다. 
	*  이 방식은 동기화 방법과 관련되어 있고, 또한 공유 상태를 피할 수 없을 떄 사용하는 방식
	* 3. Mutual exclusion 
	*
		Thread에 lock이나 semaphore를 걸어서 공유자원에는 하나의 스레드만 
		접근 가능하게 한다.
		
	  4. Atomic operations
	
		데이터 변경시 atomic하게 데이터에 접근하도록 만듭니다.
		atomic: 프로그래밍에서 데이터 변경이 동시에 일어나게 하는 것처럼 보이게 하는 것을 의미 
		데이터 값을 변경하는 것은 항상 그 시간이 필요하다. atomic 한 데이터 변경이
		이루어지는 시간에는 lock을 건다. 그래서 데이터를 변경하는 시간동안에는 
		접근이 이루어지지 않도록 한다. 
		property가 atomic하다는 것은 멀티 스레드 환경에서 데이터가
		반드시 변경전과 후의 상황에서만 접근하는 것을 보장한다.
		즉 데이터의 변경이 이루어지고 있는 순간에는 접근이 불가능하다 
	 
	  5. Immutable Object
		
		객체 생성 이후에 값을 변경할 수 없도록 만듭니다.
		
	스레드 동기화란?
	
	실행순서의 동기화 
	
	스레드의 실행순서를 정의하고, 반드시 이 순서에 따르도록하면 동기화가능하다
	
	
	메모리 접근에 대한 동기화 
	
	데이터 영역과 힙영역과 같이 한 순간에 하나의 스레드만 접근하도록 하는것이
	메모리 접근에 대한 동기화다 만약 두개의 스레드가 동시에 데이터에 접근하여 
	변경한다면 계산 결과가 덮여쓰여지는 등 여러문제가 발생할 수 있다. 
	
	동기화를 위한 두가지 방법 
	1. 유저 모드 동기화 
	동기화가 진행되는 과정에서 커널의 힘을 빌리지 않는 동기화 기법.
	따라서 동기화를 위해서 커널 모드로의 전환이 불필요해 성능상의 이점이 있다. 
	그러나 그만큼 기능상 제한도 있다 
	ex) 크리티컬 섹션 기반의 동기화, 인터락 함수 기반의 동기화 
	
	커널 모드 동기화 
	
	2. 커널 모드 동기화 
	
	커널에서 제공하는 동기화 기능을 활용하는 방법이다. 
	따라서 동기화에 관련된 함수가 호출될 때마다 커널모드로의 변경이 필요하고, 
	이는 성능의 저하로 이어지게 된다. 
	하지만 그만큼 유저모드 동기화에서 제공하지 못하는 기능을
	제공 받을 수 있다 .
	Mutex기반의 동기화 세마포어 기반의 동기화 
	이름있는 뮤텍스 기반의 프로세스 동기화, 이벤트기반읟 ㅗㅇ기화 
	
	*  
	*
	*/
}
